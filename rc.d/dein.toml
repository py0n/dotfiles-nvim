# MatchTagAlways {{{
# https://github.com/Valloric/MatchTagAlways
# 対応するタグをハイライトする
[[plugins]]
repo  = 'Valloric/MatchTagAlways'
on_ft = ['html', 'jinja', 'xhtml', 'xml']
# }}}

# agit.vim
[[plugins]]
repo   = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']

# codic-vim
[[plugins]]
repo      = 'koron/codic-vim'
on_cmd    = ['Codic']
on_source = ['unite-codic.vim']

# context_filetype.vim {{{
# https://github.com/Shougo/context_filetype.vim
[[plugins]]
repo     = 'Shougo/context_filetype.vim'
hook_add = '''
    if !exists('g:context_filetype#filetypes')
        let g:context_filetype#filetypes = {}
    endif
    let g:context_filetype#filetypes['html'] = [
     \  {
     \      'filetype' : 'javascript',
     \      'start'    : '<script\%( [^>]*\)\? type="text/javascript"\%( [^>]*\)\?>',
     \      'end'      : '</script>',
     \  },
     \  ]
    let g:context_filetype#filetypes['toml'] = [
     \  {
     \      'filetype' : 'vim',
     \      'start'    : '^\s*hook_\(add\|source\|post_source\)\s*=\s*\('.'""'.'"'.'\|'."''"."'".'\)',
     \      'end'      : '\2',
     \  },
     \  ]
'''
# }}}

# dein.vim
[[plugins]]
repo = 'Shougo/dein.vim'

# deoplete-go {{{
# https://github.com/zchee/deoplete-go
[[plugins]]
repo  = 'zchee/deoplete-go'
on_ft = ['go']

  [plugins.build]
  linux = 'make'
  unix  = 'gmake'
# }}}

# ghcmod-vim {{{
# https://github.com/eagletmt/ghcmod-vim
[[plugins]]
repo    = 'eagletmt/ghcmod-vim'
depends = ['vimproc']
on_ft   = ['haskell']
hook_add = '''
    " `:execute` を使はないと `E488: Trailing characters` が出る
    " http://stackoverflow.com/questions/9148579/vim-autocmd-e488-trailing-characters
    autocmd MyAugroup BufWritePost  *.hs :execute "GhcModCheckAndLintAsync"
    autocmd MyAugroup FileWritePost *.hs :execute "GhcModCheckAndLintAsync"

    " i:inspect, l:lint
    autocmd MyAugroup FileType haskell nnoremap <buffer> [haskell]i :GhcModTypeClear<CR>:GhcModType<CR>
    autocmd MyAugroup FileType haskell nnoremap <buffer> [haskell]l :GhcModCheckAndLint<CR>
'''
# }}}

# lightline.vim {{{
# https://github.com/itchyny/lightline.vim
[[plugins]]
repo     = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
     \  'colorscheme'  : 'solarized',
     \  'separator'    : {'left': '', 'right': ''},
     \  'subseparator' : {'left': '', 'right': ''},
     \  }
'''
# }}}

# linediff.vim {{{
# https://github.com/AndrewRadev/linediff.vim
# http://deris.hatenablog.jp/entry/2013/12/15/235606
# (使用法)
# 1. 比較したい行をvisual modeで選択して `Linediff` を実行
# 2. 比較対象の行をvisual modeで選択した上で再度 `Linediff` を実行
[[plugins]]
repo   = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffReset']
# }}}

# neomru
[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['unite.vim']

# tabular {{{
# https://github.com/godlygeek/tabular
[[plugins]]
repo      = 'godlygeek/tabular'
on_source = ['vim-markdown']
# }}}

# unite-codic.vim
[[plugins]]
repo      = 'rhysd/unite-codic.vim'
depends   = ['codic-vim']
on_source = ['unite.vim']

# unite-mark
[[plugins]]
repo      = 'tacroe/unite-mark'
on_source = ['unite.vim']

# unite-outline
[[plugins]]
repo      = 'Shougo/unite-outline'
on_source = ['unite.vim']

# unite-haddock {{{
# https://github.com/eagletmt/unite-haddock
[[plugins]]
repo     = 'eagletmt/unite-haddock'
depends  = ['unite.vim']
on_ft    = ['haskell']
hook_add = '''
    " http://eagletmt.hateblo.jp/entry/2012/03/17/194950
    " `unite.vim` で `hoogle` を使ふ
    "
    " :Unite hoogle
    "   `p` でカーソル行のパッケージをプレビュー表示
    "
    " :Unite -auto-preview hoogle
    "   カーソル行のパッケージを自動でプレビュー表示
    "
    " :UniteWithCursorWord hoogle
    "   カーソル位置の單語で検索
    let g:unite_source_haddock_browser = 'w3m'
    autocmd MyAugroup Filetype haskell nnoremap <buffer> [unite]h :Unite -auto-preview hoogle<CR>
    autocmd MyAugroup Filetype haskell nnoremap <buffer> [unite]w :UniteWithCursorWord hoogle<CR>
'''
# }}}

# unite.vim {{{
# https://github.com/Shougo/unite.vim
[[plugins]]
repo     = 'Shougo/unite.vim'
lazy     = 1
pre_cmd  = ['Unite']
hook_add = '''
    " バッファ及び最近使用したファイル一覧 (要 neomru)
    nnoremap <C-P> :<C-u>Unite -buffer-name=files buffer file_mru<CR>
    nnoremap <C-N> :<C-u>Unite -buffer-name=files file file/new<CR>

    " unite.vim呼び出し
    " http://deris.hatenablog.jp/entry/2013/05/02/192415
    nnoremap [unite]  <Nop>
    nmap     <Space>u [unite]

    " grep
    nnoremap <silent> [unite]g :<C-u>Unite grep -buffer-name=search-buffer<CR>
    nnoremap <silent> [unite]r :<C-u>UniteResume search-buffer<CR>

    " マーク (要 unite-mark)
    nnoremap <silent> [unite]m :<C-u>Unite mark<CR>

    " アウトライン (要 unite-outline)
    " http://qiita.com/martini3oz/items/2cebdb805f45e7b4b901
    nnoremap <silent> [unite]o :<C-u>Unite -vertical outline<CR>

    " `<C-c>` で閉じる
    autocmd MyAugroup FileType unite inoremap <silent> <buffer> <C-c> <ESC>:q<CR>
    autocmd MyAugroup FileType unite nnoremap <silent> <buffer> <C-c> :q<CR>

    " grep {{{
    " unite grep で pt を利用する
    " Ref. help unite-source-grep
    " http://blog.monochromegane.com/blog/2013/09/18/ag-and-unite/
    if executable('pt')
        " Use pt in unite grep source.
        " https://github.com/monochromegane/the_platinum_searcher
        let g:unite_source_grep_command       = 'pt'
        let g:unite_source_grep_default_opts  = '--nogroup --nocolor -i'
        let g:unite_source_grep_encoding      = 'utf-8'
        let g:unite_source_grep_recursive_opt = ''
    elseif executable('ag')
        " Use ag in unite grep source.
        let g:unite_source_grep_command       = 'ag'
        let g:unite_source_grep_default_opts  =
         \  '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
         \  '".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr"'
        let g:unite_source_grep_recursive_opt = ''
    elseif executable('ack-grep')
        " Use ack in unite grep source.
        let g:unite_source_grep_command       = 'ack-grep'
        let g:unite_source_grep_default_opts  =
         \  '-i --no-heading --no-color -k -H'
        let g:unite_source_grep_recursive_opt = ''
    endif
    let g:unite_source_history_yank_list = 10000
    " }}}
'''
hook_source = '''
    call unite#custom#profile('default', 'context', {
     \  'direction'        : 'botright',
     \  'ignorecase'       : 1,
     \  'prompt_direction' : 'top',
     \  'smartcase'        : 1,
     \  'start_insert'     : 1,
     \  })
'''
# }}}

# vim-alignta {{{
# https://github.com/h1mesuke/vim-alignta
[[plugins]]
repo     = 'h1mesuke/vim-alignta'
on_cmd   = ['Align', 'AlignTsp', 'Alignta']
hook_add = '''
    " http://nanasi.jp/articles/vim/align/align_vim_ext.html#alignctrl
    " `AilgnCtrl` で変更した設定を初期状態に戻す
    command! -nargs=0 AlignReset call Align#AlignCtrl('default')
    " http://nanasi.jp/articles/vim/align/align_vim_mapt.html#leader-tsp-leader-tsp
    " 空白揃へ (ref. \tsp or \Tsp)
    command! -range -nargs=? AlignTsp :<line1>,<line2>Alignta <args> \S\+
'''
# }}}

# vim-anzu {{{
# https://github.com/osyo-manga/vim-anzu
# 現在の検索位置を画面に表示
[[plugins]]
repo     = 'osyo-manga/vim-anzu'
on_map   = ['<Plug>(anzu-']
hook_add = '''
    " ヒットした檢索語が畫面中段に來るやうに
    " `zz'を付加してゐる。
    nmap n <Plug>(anzu-n-with-echo)zvzz
    nmap N <Plug>(anzu-N-with-echo)zvzz
    nmap * <Plug>(anzu-star-with-echo)zvzz
    nmap # <Plug>(anzu-sharp-with-echo)zvzz

    " 一定時間キー入力がないとき、ウインドウを移動したとき、
    " タブを移動したときに検索ヒット数の表示を消去する。
    autocmd MyAugroup CursorHold  * call anzu#clear_search_status()
    autocmd MyAugroup CursorHoldI * call anzu#clear_search_status()
    autocmd MyAugroup WinLeave    * call anzu#clear_search_status()
    autocmd MyAugroup TabLeave    * call anzu#clear_search_status()
'''
# }}}

# vim-colors-solarized {{{
# https://github.com/altercation/vim-colors-solarized
[[plugins]]
repo     = 'altercation/vim-colors-solarized'
hook_add = '''
    " http://ethanschoonover.com/solarized
    let g:solarized_hitrail    = 1
    let g:solarized_termcolors = 256
    let g:solarized_termtrans  = 1
    let g:solarized_visibility = "high"
    set background=dark
'''
# }}}

# vim-easymotion {{{
# https://github.com/easymotion/vim-easymotion
[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = ['/', '<Space>h', '<Space>j', '<Space>k', '<Space>l', '<Space>w', 's']
hook_source = '''
    " http://haya14busa.com/vim-lazymotion-on-speed/
    " http://haya14busa.com/mastering-vim-easymotion/
    " http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/

    " Disable default mappings
    " If you are true vimmer, you should explicitly map keys by yourself.
    " Do not rely on default bidings.
    let g:EasyMotion_do_mapping = 0

    " n-character serach motion
    " Extend search motions with vital-over command line interface
    " Incremental highlight of all the matches
    " Now, you don't need to repetitively press `n` or `N` with
    " EasyMotion feature
    " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
    " :h easymotion-command-line
    nmap / <Plug>(easymotion-sn)
    xmap / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)

    " s{char}{char} to move to {char}{char}
    nmap s <Plug>(easymotion-overwin-f2)
    vmap s <Plug>(easymotion-bd-f2)

    " hjkl motions
    "map  <Space>j <Plug>(easymotion-j)
    "map  <Space>k <Plug>(easymotion-k)
    map  <Space>h <Plug>(easymotion-linebackward)
    map  <Space>j <Plug>(easymotion-bd-jk)
    map  <Space>k <Plug>(easymotion-bd-jk)
    map  <Space>l <Plug>(easymotion-lineforward)
    nmap <Space>j <Plug>(easymotion-overwin-line)
    nmap <Space>k <Plug>(easymotion-overwin-line)

    " Move to word
    map  <Space>w <Plug>(easymotion-bd-w)
    nmap <Space>w <Plug>(easymotion-overwin-w)

    " keep cursor colum when JK motion
    let g:EasyMotion_startofline = 0

    " Show target key with upper case to improve readability
    let g:EasyMotion_keys      = 'HKLYUIOPNM,QWERTASDGZXCVBJF;'
    let g:EasyMotion_use_upper = 1
'''
# }}}

# vim-fugitive {{{
# https://github.com/lambdalisue/vim-gista
[[plugins]]
repo             = 'tpope/vim-fugitive'
on_cmd           = ['Gblame', 'Gcommit', 'Gdiff', 'Gstatus', 'Gwrite', 'Gvdiff']
on_func          = ['fugitive#head']
hook_post_source = '''
    " http://lambdalisue.hatenablog.com/entry/2014/07/01/203015
    doautoall fugitive BufNewFile
'''
# }}}

# vim-gista {{{
# https://github.com/lambdalisue/vim-gista
[[plugins]]
repo     = 'lambdalisue/vim-gista'
on_cmd   = ['Gista']
pre_func = ['gista#']
hook_source = '''
    " http://lambdalisue.hatenablog.com/entry/2014/07/01/203015
    if exists('g:gista#client#apinames')
        for k in keys(g:gista#client#apinames)
            " 以下の変数は `$HOME/.local.vim` で定義する
            " g:gista#client#apinames (非標準の配列変数)
            " g:gista#client#default_apiname
            " g:gista#client#default_username
            call gista#client#register(k, g:gista#client#apinames[k])
        endfor
    endif
'''
# }}}

# vim-gitgutter {{{
# https://github.com/airblade/vim-gitgutter
[[plugins]]
repo     = 'airblade/vim-gitgutter'
on_cmd   = ['GitGutterEnable']
hook_add = '''
    let g:gitgutter_sign_added    = '✚'
    let g:gitgutter_sign_modified = '➜'
    let g:gitgutter_sign_removed  = '✘'

    " デフォルトでは以下のキーマップが設定されている。
    " nmap ]c <Plug>GitGutterNextHunk
    " nmap [c <Plug>GitGutterPrevHunk

    autocmd MyAugroup VimEnter * :GitGutterEnable
'''
# }}}

# vim-go {{{
# https://github.com/fatih/vim-go
[[plugins]]
repo     = 'fatih/vim-go'
on_ft    = ['go']
hook_add = '''
    let g:go_fmt_command = 'goimports'
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]f :GoFmt
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]l :GoLint
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]t :GoTest
'''
# }}}

# vim-go-extra {{{
# https://github.com/vim-jp/vim-go-extra
[[plugins]]
repo     = 'vim-jp/vim-go-extra'
depends  = ['vimproc']
if       = 0
on_ft    = ['go']
hook_add = '''
    let g:gofmt_command = 'goimports'
    autocmd MyAugroup BufWritePre *.go Fmt
'''
# }}}

# vim-localrc {{{
# https://github.com/thinca/vim-localrc
# http://d.hatena.ne.jp/thinca/20110108/1294427418
[[plugins]]
repo     = 'thinca/vim-localrc'
if       = '!has("win32unix")'
hook_add = '''
    let g:localrc_filename = '.local.vim'
'''
# }}}

# vim-markdown {{{
# https://github.com/plasticboy/vim-markdown
[[plugins]]
repo    = 'plasticboy/vim-markdown'
depends = ['tabular']
on_ft   = ['markdown']
hook_add = '''
    let g:vim_markdown_folding_level = 2
'''
# }}}

# vim-precious {{{
# https://github.com/osyo-manga/vim-precious
# カーソルの位置によって `filetype` を切り替える
[[plugins]]
repo     = 'osyo-manga/vim-precious'
depends  = ['context_filetype.vim']
on_ft    = ['html', 'toml']
hook_add = '''
    " http://qiita.com/kawaz/items/ee725f6214f91337b42b
    let g:precious_enable_switch_CursorMoved = {'*':0, 'help':1}
    autocmd MyAugroup InsertEnter * :PreciousSwitch
    autocmd MyAugroup InsertLeave * :PreciousReset
'''
# }}}

# vim-rooter {{{
# https://github.com/airblade/vim-rooter
# 自動で `project root` に `lcd`
[[plugins]]
repo        = 'airblade/vim-rooter'
hook_source = '''
    let g:rooter_silent_chdir = 1
    let g:rooter_use_lcd      = 1
'''
# }}}

# vim-surround
[[plugins]]
repo = 'tpope/vim-surround'

# vim-unite-giti
[[plugins]]
repo      = 'kmnk/vim-unite-giti'
on_source = ['unite.vim']

# vimproc {{{
[[plugins]]
repo = 'Shougo/vimproc'

  [plugins.build]
  windows = 'tools\\update-dll-mingw'
  cygwin  = 'make -f make_cygwin.mak'
  mac     = 'make'
  linux   = 'make'
  unix    = 'gmake'
# }}}

# wildfire.vim {{{
# https://github.com/gcmt/wildfire.vim
[[plugins]]
repo        = 'gcmt/wildfire.vim'
hook_source = '''
    " http://hail2u.net/blog/software/vim-wildfire.html
    " http://m.designbits.jp/14030411/
    let g:wildfire_objects = ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it', 'i>']
'''
# }}}

# vim:set fileencoding=utf-8 fileformat=unix foldmethod=marker:
