# プラグインの削除はTOMLファイルからエントリを削除後,以下のコマンドを實行する
# call map(dein#check_clean(), "delete(v:val, 'rf')")
# call dein#recache_runtimepath()

# MatchTagAlways {{{
# https://github.com/Valloric/MatchTagAlways
# 対応するタグをハイライトする
[[plugins]]
repo  = 'Valloric/MatchTagAlways'
on_ft = ['html', 'jinja', 'xhtml', 'xml']
# }}}

# agit.vim {{{
[[plugins]]
repo   = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']
# }}}

# coc.nvim {{{
# https://github.com/neoclide/coc.nvim
# http://mee.hatenablog.com/entry/2019/09/28/012939
[[plugins]]
repo     = 'neoclide/coc.nvim'
merge    = 0
rev      = 'release'
hook_add = '''
    " if hidden is not set, TextEdit might fail.
    set hidden

    " Some servers have issues with backup files, see #649
    set nobackup
    set nowritebackup

    " Better display for messages
    set cmdheight=2

    " You will have bad experience for diagnostic messages when it's default 4000.
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    " Or use `complete_info` if your vim support it, like:
    " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s).
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Create mappings for function text object, requires document symbols feature of languageserver.
    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)

    " Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
    nmap <silent> <TAB> <Plug>(coc-range-select)
    xmap <silent> <TAB> <Plug>(coc-range-select)

    " Use `:Format` to format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " use `:OR` for organize import of current buffer
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add status line support, for integration with other plugin, checkout `:h coc-status`
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''
# }}}

# context_filetype.vim {{{
# https://github.com/Shougo/context_filetype.vim
[[plugins]]
repo     = 'Shougo/context_filetype.vim'
hook_add = '''
    if !exists('g:context_filetype#filetypes')
        let g:context_filetype#filetypes = {}
    endif
    let g:context_filetype#filetypes['html'] = [
     \  {
     \      'filetype' : 'javascript',
     \      'start'    : '<script\%( [^>]*\)\? type="text/javascript"\%( [^>]*\)\?>',
     \      'end'      : '</script>',
     \  },
     \  ]
    let g:context_filetype#filetypes['toml'] = [
     \  {
     \      'filetype' : 'vim',
     \      'start'    : '^\s*hook_\(add\|source\|post_source\)\s*=\s*\('.'""'.'"'.'\|'."''"."'".'\)',
     \      'end'      : '\2',
     \  },
     \  ]
'''
# }}}

# dein.vim {{{
[[plugins]]
repo = 'Shougo/dein.vim'
# }}}

# denite.nvim {{{
[[plugins]]
repo     = 'Shougo/denite.nvim'
hook_add = 'source ~/.config/nvim/rc.d/dein/denite.vim'
# }}}

## deoplete {{{
## https://github.com/Shougo/deoplete.nvim
#[[plugins]]
#repo     = 'Shougo/deoplete.nvim'
#hook_add = '''
#    let g:deoplete#enable_at_startup = 1
#'''
## }}}

# lightline.vim {{{
# https://github.com/itchyny/lightline.vim
# https://github.com/retorillo/powercord
[[plugins]]
repo     = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
     \  'colorscheme'  : 'solarized',
     \  'separator'    : {'left': "\u2b80", 'right': "\u2b82"},
     \  'subseparator' : {'left': "\u2b81", 'right': "\u2b83"},
     \  'active'       : {
     \      'left' : [
     \          ['mode'],
     \          ['fugitive', 'gitgutter', 'filename', 'anzu']
     \      ],
     \      'right': [
     \          ['syntastic', 'lineinfo'],
     \          ['percent'],
     \          ['charcode', 'fileformat', 'fileencoding', 'filetype']
     \      ]
     \  },
     \  'component_expand': {
     \      'syntastic': 'SyntasticStatuslineFlag'
     \  },
     \  'component_function': {
     \      'anzu'         : 'MyAnzu',
     \      'charcode'     : 'MyCharCode',
     \      'fileencoding' : 'MyFileencoding',
     \      'fileformat'   : 'MyFileformat',
     \      'filename'     : 'MyFilename',
     \      'filetype'     : 'MyFiletype',
     \      'fugitive'     : 'MyFugitive',
     \      'gitgutter'    : 'MyGitgutter',
     \      'lineinfo'     : 'MyLineinfo',
     \      'mode'         : 'MyMode',
     \      'percent'      : 'MyPercent'
     \  },
     \  'component_type': {'syntastic': 'error'}
     \  }
    function! MyAnzu() " {{{
        if dein#check_install(['vim-anzu'])
            return ''
        endif
        return anzu#search_status()
    endfunction " }}}
    function! MyCharCode() " {{{
        " Get the output of :ascii
        redir => ascii
        silent! ascii
        redir END

        if match(ascii, 'NUL') != -1
            return 'NUL'
        endif

        " Get the character and the numeric value from the return value of :ascii
        " This matches the two first pieces of the return value, e.g.
        " "<F>  70" => char: 'F', nr: '70'
        let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

        " Unicodeスカラ値
        let uniHex = printf('%X', nr)
        if strlen(uniHex) < 4
            for i in range(4 - strlen(uniHex))
                let uniHex = '0' . uniHex
            endfor
        endif
        let uniHex = 'U+' . uniHex

        " iconvが利用可能ならfileencodingでの文字コードも表示する
        let fencStr = iconv(char, &encoding, &fileencoding)
        let fencHex = ''
        for i in range(strlen(fencStr))
            let fencHex = fencHex . printf('%X', char2nr(fencStr[i]))
        endfor
        let fencHex = '0x' . (strlen(fencHex) % 2 == 1 ? '0' : '') . fencHex

        return "'" . char . "' " . fencHex . " (" . uniHex . ")"
    endfunction " }}}
    function! MyFileencoding() " {{{
        return strlen(&fileencoding) ? &fileencoding : &encoding
    endfunction " }}}
    function! MyFileformat() " {{{
        return &ff
    endfunction " }}}
    function! MyFilename() " {{{
        return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
         \  (&ft == 'vimfiler' ? vimfiler#get_status_string() :
         \      &ft == 'unite' ? unite#get_status_string() :
         \      &ft == 'vimshell' ? vimshell#get_status_string() :
         \      '' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \  ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction " }}}
    function! MyFiletype() " {{{
        return strlen(&filetype) ? &filetype : 'no ft'
    endfunction " }}}
    function! MyFugitive() " {{{
        try
            if &filetype !~? '\v(vimfiler|gundo)'
                let head = fugitive#head()
                return head
            else
                throw 'vimfiler_or_gundo'
            endif
        catch
            return ''
        endtry
    endfunction " }}}
    function! MyGitgutter() " {{{
        " http://qiita.com/yuyuchu3333/items/20a0acfe7e0d0e167ccc
        if dein#check_install(['vim-gitgutter'])
            return ''
        endif
        let hunks = GitGutterGetHunkSummary()
        let symbols = [
         \  g:gitgutter_sign_added . ' ',
         \  g:gitgutter_sign_modified . ' ',
         \  g:gitgutter_sign_removed . ' '
         \  ]
        let ret = []
        for i in [0, 1, 2]
            if hunks[i] > 0
                call add(ret, symbols[i] . hunks[i])
            endif
        endfor
        return join(ret, ' ')
    endfunction " }}}
    function! MyLineinfo() " {{{
        let l:cl = line('.')
        let l:cc = col('.')
        return printf('%d:%d', l:cl, l:cc)
    endfunction " }}}
    function! MyMode() " {{{
        let l:ps = ''
        if &paste
            let l:ps = ' P'
        endif
        return lightline#mode() . l:ps
    endfunction " }}}
    function! MyModified() " {{{
        return &filetype =~ '\v(help|vimfiler|gundo)'
         \  ? ''  : &modified
         \  ? '+' : &modifiable
         \  ? ''  : '-'
     endfunction " }}}
     function! MyPercent() " {{{
         let l:cl = line('.')
         let l:ll = line('$')
         return printf('%3d%%', 100 * l:cl / l:ll)
     endfunction " }}}
     function! MyReadonly() " {{{
         return &ft !~? '\v(help|vimfiler|gundo)' && &ro ? 'x' : ''
     endfunction " }}}
'''
# }}}

# linediff.vim {{{
# https://github.com/AndrewRadev/linediff.vim
# http://deris.hatenablog.jp/entry/2013/12/15/235606
# (使用法)
# 1. 比較したい行をvisual modeで選択して `Linediff` を実行
# 2. 比較対象の行をvisual modeで選択した上で再度 `Linediff` を実行
[[plugins]]
repo   = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffReset']
# }}}

# neomru {{{
[[plugins]]
repo = 'Shougo/neomru.vim'
# }}}

# syntastic {{{
# https://github.com/scrooloose/syntastic
# http://d.hatena.ne.jp/heavenshell/20120106/1325866974
# http://d.hatena.ne.jp/itchyny/20130918/1379461406
[[plugins]]
repo     = 'scrooloose/syntastic'
lazy     = 1
on_func  = ['SyntasticStatuslineFlag']
hook_add = '''
    " 作者が教える！ lightline.vimの設定方法！ 〜 中級編 - 展開コンポーネントを理解しよう - プログラムモグモグ
    " http://itchyny.hatenablog.com/entry/20130918/1379461406
    " syntasticでperlのsyntaxcheckが動かなくなった件 - 呆備録
    " http://d.hatena.ne.jp/oppara/20140515/p1
    " 【Go × Vim】 VimでGoを書く - 2015 Spring
    " http://qiita.com/izumin5210/items/1f3c312edd7f0075b09c
    let g:syntastic_debug               = 0
    let g:syntastic_enable_perl_checker = 1
    let g:syntastic_mode_map            = {'mode': 'passive'}

    let g:syntastic_go_checkers   = ['go', 'golint']
    let g:syntastic_perl_checkers = ['perl', 'perlcritic', 'podchecker']
'''
hook_post_source = '''
    function! s:syntastic()
        SyntasticCheck
        call lightline#update()
    endfunction

    autocmd MyAugroup BufWritePost *.go      call s:syntastic()
    autocmd MyAugroup BufWritePost *.pl,*.pm call s:syntastic()
    autocmd MyAugroup BufWritePost *.py      call s:syntastic()
    autocmd MyAugroup BufWritePost *.t       call s:syntastic()
'''
# }}}

# tabular {{{
# https://github.com/godlygeek/tabular
[[plugins]]
repo      = 'godlygeek/tabular'
on_source = ['vim-markdown']
# }}}

# vim-alignta {{{
# https://github.com/h1mesuke/vim-alignta
[[plugins]]
repo   = 'h1mesuke/vim-alignta'
on_cmd = ['Align', 'AlignTsp', 'Alignta']
hook_add = '''
    " http://nanasi.jp/articles/vim/align/align_vim_ext.html#alignctrl
    " `AilgnCtrl` で変更した設定を初期状態に戻す
    command! -nargs=0 AlignReset call Align#AlignCtrl('default')
    " http://nanasi.jp/articles/vim/align/align_vim_mapt.html#leader-tsp-leader-tsp
    " 空白揃へ (ref. \tsp or \Tsp)
    command! -range -nargs=? AlignTsp :<line1>,<line2>Alignta <args> \S\+
'''
# }}}

# vim-anzu {{{
# https://github.com/osyo-manga/vim-anzu
# 現在の検索位置を画面に表示
[[plugins]]
repo     = 'osyo-manga/vim-anzu'
on_map   = ['<Plug>(anzu-']
hook_add = '''
    " ヒットした檢索語が畫面中段に來るやうに
    " `zz'を付加してゐる。
    nmap n <Plug>(anzu-n-with-echo)zvzz
    nmap N <Plug>(anzu-N-with-echo)zvzz
    nmap * <Plug>(anzu-star-with-echo)zvzz
    nmap # <Plug>(anzu-sharp-with-echo)zvzz

    " 一定時間キー入力がないとき、ウインドウを移動したとき、
    " タブを移動したときに検索ヒット数の表示を消去する。
    autocmd MyAugroup CursorHold  * call anzu#clear_search_status()
    autocmd MyAugroup CursorHoldI * call anzu#clear_search_status()
    autocmd MyAugroup WinLeave    * call anzu#clear_search_status()
    autocmd MyAugroup TabLeave    * call anzu#clear_search_status()
'''
# }}}

# vim-colors-solarized {{{
# https://github.com/altercation/vim-colors-solarized
[[plugins]]
repo     = 'altercation/vim-colors-solarized'
hook_add = '''
    " http://ethanschoonover.com/solarized
    let g:solarized_hitrail    = 1
    let g:solarized_termcolors = 256
    let g:solarized_termtrans  = 1
    let g:solarized_visibility = "high"
    set background=dark
'''
# }}}

# vim-easymotion {{{
# https://github.com/easymotion/vim-easymotion
[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = ['/', '<Space>h', '<Space>j', '<Space>k', '<Space>l', '<Space>w', 's']
hook_source = '''
    " http://haya14busa.com/vim-lazymotion-on-speed/
    " http://haya14busa.com/mastering-vim-easymotion/
    " http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/

    " Disable default mappings
    " If you are true vimmer, you should explicitly map keys by yourself.
    " Do not rely on default bidings.
    let g:EasyMotion_do_mapping = 0

    " n-character serach motion
    " Extend search motions with vital-over command line interface
    " Incremental highlight of all the matches
    " Now, you don't need to repetitively press `n` or `N` with
    " EasyMotion feature
    " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
    " :h easymotion-command-line
    nmap / <Plug>(easymotion-sn)
    xmap / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)

    " s{char}{char} to move to {char}{char}
    nmap s <Plug>(easymotion-overwin-f2)
    vmap s <Plug>(easymotion-bd-f2)

    " hjkl motions
    "map  <Space>j <Plug>(easymotion-j)
    "map  <Space>k <Plug>(easymotion-k)
    map  <Space>h <Plug>(easymotion-linebackward)
    map  <Space>j <Plug>(easymotion-bd-jk)
    map  <Space>k <Plug>(easymotion-bd-jk)
    map  <Space>l <Plug>(easymotion-lineforward)
    nmap <Space>j <Plug>(easymotion-overwin-line)
    nmap <Space>k <Plug>(easymotion-overwin-line)

    " Move to word
    map  <Space>w <Plug>(easymotion-bd-w)
    nmap <Space>w <Plug>(easymotion-overwin-w)

    " keep cursor colum when JK motion
    let g:EasyMotion_startofline = 0

    " Show target key with upper case to improve readability
    let g:EasyMotion_keys      = 'HKLYUIOPNM,QWERTASDGZXCVBJF;'
    let g:EasyMotion_use_upper = 1
'''
# }}}

# vim-fugitive {{{
# https://github.com/lambdalisue/vim-gista
[[plugins]]
repo             = 'tpope/vim-fugitive'
on_cmd           = ['Gblame', 'Gcommit', 'Gdiff', 'Git', 'Git!', 'Gstatus', 'Gwrite', 'Gvdiff']
on_func          = ['fugitive#head']
hook_post_source = '''
    " http://lambdalisue.hatenablog.com/entry/2014/07/01/203015
    doautoall fugitive BufNewFile
'''
# }}}

# vim-gista {{{
# https://github.com/lambdalisue/vim-gista
[[plugins]]
repo     = 'lambdalisue/vim-gista'
on_cmd   = ['Gista']
pre_func = ['gista#']
hook_source = '''
    " http://lambdalisue.hatenablog.com/entry/2014/07/01/203015
    if exists('g:gista#client#apinames')
        for k in keys(g:gista#client#apinames)
            " 以下の変数は `$HOME/.local.vim` で定義する
            " g:gista#client#apinames (非標準の配列変数)
            " g:gista#client#default_apiname
            " g:gista#client#default_username
            call gista#client#register(k, g:gista#client#apinames[k])
        endfor
    endif
'''
# }}}

# vim-gitgutter {{{
# https://github.com/airblade/vim-gitgutter
[[plugins]]
repo    = 'airblade/vim-gitgutter'
lazy    = 1
on_func = ['GitGutterGetHunkSummary']
hook_add = '''
    let g:gitgutter_sign_added    = '✚'
    let g:gitgutter_sign_modified = '➜'
    let g:gitgutter_sign_removed  = '✘'
'''
hook_post_source = '''
    autocmd MyAugroup VimEnter * :GitGutterEnable

    " デフォルトでは以下のキーマップが設定されている。
    " nmap ]c <Plug>GitGutterNextHunk
    " nmap [c <Plug>GitGutterPrevHunk
'''
# }}}

# vim-go {{{
# https://github.com/fatih/vim-go
[[plugins]]
repo     = 'fatih/vim-go'
on_ft    = ['go']
hook_add = '''
    let g:go_fmt_command = 'goimports'
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]f :GoFmt
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]l :GoLint
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]t :GoTest
'''
# }}}

# vim-go-extra {{{
# https://github.com/vim-jp/vim-go-extra
[[plugins]]
repo     = 'vim-jp/vim-go-extra'
depends  = ['vimproc']
if       = 0
on_ft    = ['go']
hook_add = '''
    let g:gofmt_command = 'goimports'
    autocmd MyAugroup BufWritePre *.go Fmt
'''
# }}}

# vim-localrc {{{
# https://github.com/thinca/vim-localrc
# http://d.hatena.ne.jp/thinca/20110108/1294427418
[[plugins]]
repo     = 'thinca/vim-localrc'
if       = '!has("win32unix")'
hook_add = '''
    let g:localrc_filename = '.local.vim'
'''
# }}}

# vim-markdown {{{
# https://github.com/plasticboy/vim-markdown
[[plugins]]
repo    = 'plasticboy/vim-markdown'
depends = ['tabular']
on_ft   = ['markdown']
hook_add = '''
    let g:vim_markdown_folding_level = 2
'''
# }}}

# vim-precious {{{
# https://github.com/osyo-manga/vim-precious
# カーソルの位置によって `filetype` を切り替える
[[plugins]]
repo     = 'osyo-manga/vim-precious'
depends  = ['context_filetype.vim']
on_ft    = ['html', 'toml']
hook_add = '''
    " http://qiita.com/kawaz/items/ee725f6214f91337b42b
    let g:precious_enable_switch_CursorMoved = {'*':0, 'help':1}
    autocmd MyAugroup InsertEnter * :PreciousSwitch
    autocmd MyAugroup InsertLeave * :PreciousReset
'''
# }}}

# vim-rooter {{{
# https://github.com/airblade/vim-rooter
# 自動で `project root` に `lcd`
[[plugins]]
repo        = 'airblade/vim-rooter'
hook_source = '''
    let g:rooter_silent_chdir = 1
    let g:rooter_use_lcd      = 1
'''
# }}}

# vim-surround {{{
[[plugins]]
repo = 'tpope/vim-surround'
# }}}

# vimproc {{{
[[plugins]]
repo = 'Shougo/vimproc'
host_post_update = '''
    if executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
'''
# }}}

# vim-toml {{{
[[plugins]]
repo = 'cespare/vim-toml'
# }}}

# wildfire.vim {{{
# https://github.com/gcmt/wildfire.vim
#[[plugins]]
#repo        = 'gcmt/wildfire.vim'
#hook_source = '''
#    " http://hail2u.net/blog/software/vim-wildfire.html
#    " http://m.designbits.jp/14030411/
#    let g:wildfire_objects = ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it', 'i>']
#'''
# }}}

# vim:set fileencoding=utf-8 fileformat=unix foldmethod=marker:
