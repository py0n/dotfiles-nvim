# プラグインの削除はTOMLファイルからエントリを削除後,以下のコマンドを實行する
# call map(dein#check_clean(), "delete(v:val, 'rf')")
# call dein#recache_runtimepath()

# MatchTagAlways {{{
# https://github.com/Valloric/MatchTagAlways
# 対応するタグをハイライトする
[[plugins]]
repo  = 'Valloric/MatchTagAlways'
on_ft = ['html', 'jinja', 'xhtml', 'xml']
# }}}

# agit.vim {{{
[[plugins]]
repo   = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']
# }}}

[[plugins]]
repo     = 'neoclide/coc.nvim'
merge    = 0
rev      = 'release'
hook_add = 'call deinhook#coc#hookadd()'

[[plugins]]
repo     = 'Shougo/context_filetype.vim'
hook_add = 'call deinhook#context_filetype#hookadd()'

# dein.vim {{{
[[plugins]]
repo = 'Shougo/dein.vim'
# }}}

[[plugins]]
repo     = 'Shougo/denite.nvim'
hook_add = 'call deinhook#denite#hookadd()'

## deoplete {{{
## https://github.com/Shougo/deoplete.nvim
#[[plugins]]
#repo     = 'Shougo/deoplete.nvim'
#hook_add = '''
#    let g:deoplete#enable_at_startup = 1
#'''
## }}}

[[plugins]]
repo     = 'itchyny/lightline.vim'
hook_add = 'call deinhook#lightline#hookadd()'

# linediff.vim {{{
# https://github.com/AndrewRadev/linediff.vim
# http://deris.hatenablog.jp/entry/2013/12/15/235606
# (使用法)
# 1. 比較したい行をvisual modeで選択して `Linediff` を実行
# 2. 比較対象の行をvisual modeで選択した上で再度 `Linediff` を実行
[[plugins]]
repo   = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffReset']
# }}}

# neomru {{{
[[plugins]]
repo = 'Shougo/neomru.vim'
# }}}

[[plugins]]
repo             = 'scrooloose/syntastic'
lazy             = 1
on_func          = ['SyntasticStatuslineFlag']
hook_add         = 'call deinhook#syntastic#hookadd()'
hook_post_source = 'call deinhook#syntastic#hookpostsource()'

# tabular {{{
# https://github.com/godlygeek/tabular
[[plugins]]
repo      = 'godlygeek/tabular'
on_source = ['vim-markdown']
# }}}

[[plugins]]
repo     = 'h1mesuke/vim-alignta'
on_cmd   = ['Align', 'AlignTsp', 'Alignta']
hook_add = 'call deinhook#vim_alignta#hookadd()'

[[plugins]]
repo     = 'osyo-manga/vim-anzu'
on_map   = ['<Plug>(anzu-']
hook_add = 'call deinhook#vim_anzu#hookadd()'

[[plugins]]
repo     = 'altercation/vim-colors-solarized'
hook_add = 'call deinhook#vim_colors_solarized#hookadd()'

[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = ['/', '<Space>h', '<Space>j', '<Space>k', '<Space>l', '<Space>w', 's']
hook_source = 'call deinhook#vim_easymotion#hookadd()'

# vim-fugitive {{{
# https://github.com/lambdalisue/vim-gista
[[plugins]]
repo             = 'tpope/vim-fugitive'
on_cmd           = ['Gblame', 'Gcommit', 'Gdiff', 'Git', 'Git!', 'Gstatus', 'Gwrite', 'Gvdiff']
on_func          = ['fugitive#head']
hook_post_source = '''
    " http://lambdalisue.hatenablog.com/entry/2014/07/01/203015
    doautoall fugitive BufNewFile
'''
# }}}

[[plugins]]
repo        = 'lambdalisue/vim-gista'
on_cmd      = ['Gista']
pre_func    = ['gista#']
hook_source = 'call deinhook#vim_gista#hookadd()'

# vim-gitgutter {{{
# https://github.com/airblade/vim-gitgutter
[[plugins]]
repo    = 'airblade/vim-gitgutter'
lazy    = 1
on_func = ['GitGutterGetHunkSummary']
hook_add = '''
    let g:gitgutter_sign_added    = '✚'
    let g:gitgutter_sign_modified = '➜'
    let g:gitgutter_sign_removed  = '✘'
'''
hook_post_source = '''
    autocmd MyAugroup VimEnter * :GitGutterEnable

    " デフォルトでは以下のキーマップが設定されている。
    " nmap ]c <Plug>GitGutterNextHunk
    " nmap [c <Plug>GitGutterPrevHunk
'''
# }}}

# vim-go {{{
# https://github.com/fatih/vim-go
[[plugins]]
repo     = 'fatih/vim-go'
on_ft    = ['go']
hook_add = '''
    let g:go_fmt_command = 'goimports'
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]f :GoFmt
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]l :GoLint
    autocmd MyAugroup Filetype go nnoremap <buffer> [go]t :GoTest
'''
# }}}

# vim-go-extra {{{
# https://github.com/vim-jp/vim-go-extra
[[plugins]]
repo     = 'vim-jp/vim-go-extra'
depends  = ['vimproc']
if       = 0
on_ft    = ['go']
hook_add = '''
    let g:gofmt_command = 'goimports'
    autocmd MyAugroup BufWritePre *.go Fmt
'''
# }}}

# vim-localrc {{{
# https://github.com/thinca/vim-localrc
# http://d.hatena.ne.jp/thinca/20110108/1294427418
[[plugins]]
repo     = 'thinca/vim-localrc'
if       = '!has("win32unix")'
hook_add = '''
    let g:localrc_filename = '.local.vim'
'''
# }}}

# vim-markdown {{{
# https://github.com/plasticboy/vim-markdown
[[plugins]]
repo    = 'plasticboy/vim-markdown'
depends = ['tabular']
on_ft   = ['markdown']
hook_add = '''
    let g:vim_markdown_folding_level = 2
'''
# }}}

# vim-precious {{{
# https://github.com/osyo-manga/vim-precious
# カーソルの位置によって `filetype` を切り替える
[[plugins]]
repo     = 'osyo-manga/vim-precious'
depends  = ['context_filetype.vim']
on_ft    = ['html', 'toml']
hook_add = '''
    " http://qiita.com/kawaz/items/ee725f6214f91337b42b
    let g:precious_enable_switch_CursorMoved = {'*':0, 'help':1}
    autocmd MyAugroup InsertEnter * :PreciousSwitch
    autocmd MyAugroup InsertLeave * :PreciousReset
'''
# }}}

# vim-rooter {{{
# https://github.com/airblade/vim-rooter
# 自動で `project root` に `lcd`
[[plugins]]
repo        = 'airblade/vim-rooter'
hook_source = '''
    let g:rooter_silent_chdir = 1
    let g:rooter_use_lcd      = 1
'''
# }}}

# vim-surround {{{
[[plugins]]
repo = 'tpope/vim-surround'
# }}}

# vimproc {{{
[[plugins]]
repo = 'Shougo/vimproc'
host_post_update = '''
    if executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
'''
# }}}

# vim-toml {{{
[[plugins]]
repo = 'cespare/vim-toml'
# }}}

# wildfire.vim {{{
# https://github.com/gcmt/wildfire.vim
#[[plugins]]
#repo        = 'gcmt/wildfire.vim'
#hook_source = '''
#    " http://hail2u.net/blog/software/vim-wildfire.html
#    " http://m.designbits.jp/14030411/
#    let g:wildfire_objects = ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it', 'i>']
#'''
# }}}

# vim:set fileencoding=utf-8 fileformat=unix foldmethod=marker:
